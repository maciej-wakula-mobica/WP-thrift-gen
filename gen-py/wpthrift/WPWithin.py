#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    """
    WorldpayWithin Service - exposing all WorldpayWithin SDK functionality
    """
    def setup(self, name, description):
        """
        Parameters:
         - name
         - description
        """
        pass

    def addService(self, svc):
        """
        Parameters:
         - svc
        """
        pass

    def removeService(self, svc):
        """
        Parameters:
         - svc
        """
        pass

    def initConsumer(self, scheme, hostname, port, urlPrefix, clientID, hceCard, pspConfig):
        """
        Parameters:
         - scheme
         - hostname
         - port
         - urlPrefix
         - clientID
         - hceCard
         - pspConfig
        """
        pass

    def initProducer(self, pspConfig):
        """
        Parameters:
         - pspConfig
        """
        pass

    def getDevice(self):
        pass

    def startServiceBroadcast(self, timeoutMillis):
        """
        Parameters:
         - timeoutMillis
        """
        pass

    def stopServiceBroadcast(self):
        pass

    def deviceDiscovery(self, timeoutMillis):
        """
        Parameters:
         - timeoutMillis
        """
        pass

    def requestServices(self):
        pass

    def getServicePrices(self, serviceId):
        """
        Parameters:
         - serviceId
        """
        pass

    def selectService(self, serviceId, numberOfUnits, priceId):
        """
        Parameters:
         - serviceId
         - numberOfUnits
         - priceId
        """
        pass

    def makePayment(self, request):
        """
        Parameters:
         - request
        """
        pass

    def beginServiceDelivery(self, serviceID, serviceDeliveryToken, unitsToSupply):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsToSupply
        """
        pass

    def endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsReceived
        """
        pass

    def CloseRPCAgent(self):
        pass


class Client(Iface):
    """
    WorldpayWithin Service - exposing all WorldpayWithin SDK functionality
    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def setup(self, name, description):
        """
        Parameters:
         - name
         - description
        """
        self.send_setup(name, description)
        self.recv_setup()

    def send_setup(self, name, description):
        self._oprot.writeMessageBegin('setup', TMessageType.CALL, self._seqid)
        args = setup_args()
        args.name = name
        args.description = description
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def addService(self, svc):
        """
        Parameters:
         - svc
        """
        self.send_addService(svc)
        self.recv_addService()

    def send_addService(self, svc):
        self._oprot.writeMessageBegin('addService', TMessageType.CALL, self._seqid)
        args = addService_args()
        args.svc = svc
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def removeService(self, svc):
        """
        Parameters:
         - svc
        """
        self.send_removeService(svc)
        self.recv_removeService()

    def send_removeService(self, svc):
        self._oprot.writeMessageBegin('removeService', TMessageType.CALL, self._seqid)
        args = removeService_args()
        args.svc = svc
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def initConsumer(self, scheme, hostname, port, urlPrefix, clientID, hceCard, pspConfig):
        """
        Parameters:
         - scheme
         - hostname
         - port
         - urlPrefix
         - clientID
         - hceCard
         - pspConfig
        """
        self.send_initConsumer(scheme, hostname, port, urlPrefix, clientID, hceCard, pspConfig)
        self.recv_initConsumer()

    def send_initConsumer(self, scheme, hostname, port, urlPrefix, clientID, hceCard, pspConfig):
        self._oprot.writeMessageBegin('initConsumer', TMessageType.CALL, self._seqid)
        args = initConsumer_args()
        args.scheme = scheme
        args.hostname = hostname
        args.port = port
        args.urlPrefix = urlPrefix
        args.clientID = clientID
        args.hceCard = hceCard
        args.pspConfig = pspConfig
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_initConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = initConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def initProducer(self, pspConfig):
        """
        Parameters:
         - pspConfig
        """
        self.send_initProducer(pspConfig)
        self.recv_initProducer()

    def send_initProducer(self, pspConfig):
        self._oprot.writeMessageBegin('initProducer', TMessageType.CALL, self._seqid)
        args = initProducer_args()
        args.pspConfig = pspConfig
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_initProducer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = initProducer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def getDevice(self):
        self.send_getDevice()
        return self.recv_getDevice()

    def send_getDevice(self):
        self._oprot.writeMessageBegin('getDevice', TMessageType.CALL, self._seqid)
        args = getDevice_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDevice(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDevice_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDevice failed: unknown result")

    def startServiceBroadcast(self, timeoutMillis):
        """
        Parameters:
         - timeoutMillis
        """
        self.send_startServiceBroadcast(timeoutMillis)
        self.recv_startServiceBroadcast()

    def send_startServiceBroadcast(self, timeoutMillis):
        self._oprot.writeMessageBegin('startServiceBroadcast', TMessageType.CALL, self._seqid)
        args = startServiceBroadcast_args()
        args.timeoutMillis = timeoutMillis
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_startServiceBroadcast(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = startServiceBroadcast_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def stopServiceBroadcast(self):
        self.send_stopServiceBroadcast()
        self.recv_stopServiceBroadcast()

    def send_stopServiceBroadcast(self):
        self._oprot.writeMessageBegin('stopServiceBroadcast', TMessageType.CALL, self._seqid)
        args = stopServiceBroadcast_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stopServiceBroadcast(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stopServiceBroadcast_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def deviceDiscovery(self, timeoutMillis):
        """
        Parameters:
         - timeoutMillis
        """
        self.send_deviceDiscovery(timeoutMillis)
        return self.recv_deviceDiscovery()

    def send_deviceDiscovery(self, timeoutMillis):
        self._oprot.writeMessageBegin('deviceDiscovery', TMessageType.CALL, self._seqid)
        args = deviceDiscovery_args()
        args.timeoutMillis = timeoutMillis
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deviceDiscovery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deviceDiscovery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deviceDiscovery failed: unknown result")

    def requestServices(self):
        self.send_requestServices()
        return self.recv_requestServices()

    def send_requestServices(self):
        self._oprot.writeMessageBegin('requestServices', TMessageType.CALL, self._seqid)
        args = requestServices_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_requestServices(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = requestServices_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "requestServices failed: unknown result")

    def getServicePrices(self, serviceId):
        """
        Parameters:
         - serviceId
        """
        self.send_getServicePrices(serviceId)
        return self.recv_getServicePrices()

    def send_getServicePrices(self, serviceId):
        self._oprot.writeMessageBegin('getServicePrices', TMessageType.CALL, self._seqid)
        args = getServicePrices_args()
        args.serviceId = serviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getServicePrices(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getServicePrices_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getServicePrices failed: unknown result")

    def selectService(self, serviceId, numberOfUnits, priceId):
        """
        Parameters:
         - serviceId
         - numberOfUnits
         - priceId
        """
        self.send_selectService(serviceId, numberOfUnits, priceId)
        return self.recv_selectService()

    def send_selectService(self, serviceId, numberOfUnits, priceId):
        self._oprot.writeMessageBegin('selectService', TMessageType.CALL, self._seqid)
        args = selectService_args()
        args.serviceId = serviceId
        args.numberOfUnits = numberOfUnits
        args.priceId = priceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_selectService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = selectService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "selectService failed: unknown result")

    def makePayment(self, request):
        """
        Parameters:
         - request
        """
        self.send_makePayment(request)
        return self.recv_makePayment()

    def send_makePayment(self, request):
        self._oprot.writeMessageBegin('makePayment', TMessageType.CALL, self._seqid)
        args = makePayment_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_makePayment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = makePayment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "makePayment failed: unknown result")

    def beginServiceDelivery(self, serviceID, serviceDeliveryToken, unitsToSupply):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsToSupply
        """
        self.send_beginServiceDelivery(serviceID, serviceDeliveryToken, unitsToSupply)
        return self.recv_beginServiceDelivery()

    def send_beginServiceDelivery(self, serviceID, serviceDeliveryToken, unitsToSupply):
        self._oprot.writeMessageBegin('beginServiceDelivery', TMessageType.CALL, self._seqid)
        args = beginServiceDelivery_args()
        args.serviceID = serviceID
        args.serviceDeliveryToken = serviceDeliveryToken
        args.unitsToSupply = unitsToSupply
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_beginServiceDelivery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = beginServiceDelivery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "beginServiceDelivery failed: unknown result")

    def endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsReceived
        """
        self.send_endServiceDelivery(serviceID, serviceDeliveryToken, unitsReceived)
        return self.recv_endServiceDelivery()

    def send_endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        self._oprot.writeMessageBegin('endServiceDelivery', TMessageType.CALL, self._seqid)
        args = endServiceDelivery_args()
        args.serviceID = serviceID
        args.serviceDeliveryToken = serviceDeliveryToken
        args.unitsReceived = unitsReceived
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_endServiceDelivery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = endServiceDelivery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "endServiceDelivery failed: unknown result")

    def CloseRPCAgent(self):
        self.send_CloseRPCAgent()
        self.recv_CloseRPCAgent()

    def send_CloseRPCAgent(self):
        self._oprot.writeMessageBegin('CloseRPCAgent', TMessageType.CALL, self._seqid)
        args = CloseRPCAgent_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CloseRPCAgent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CloseRPCAgent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["setup"] = Processor.process_setup
        self._processMap["addService"] = Processor.process_addService
        self._processMap["removeService"] = Processor.process_removeService
        self._processMap["initConsumer"] = Processor.process_initConsumer
        self._processMap["initProducer"] = Processor.process_initProducer
        self._processMap["getDevice"] = Processor.process_getDevice
        self._processMap["startServiceBroadcast"] = Processor.process_startServiceBroadcast
        self._processMap["stopServiceBroadcast"] = Processor.process_stopServiceBroadcast
        self._processMap["deviceDiscovery"] = Processor.process_deviceDiscovery
        self._processMap["requestServices"] = Processor.process_requestServices
        self._processMap["getServicePrices"] = Processor.process_getServicePrices
        self._processMap["selectService"] = Processor.process_selectService
        self._processMap["makePayment"] = Processor.process_makePayment
        self._processMap["beginServiceDelivery"] = Processor.process_beginServiceDelivery
        self._processMap["endServiceDelivery"] = Processor.process_endServiceDelivery
        self._processMap["CloseRPCAgent"] = Processor.process_CloseRPCAgent

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_setup(self, seqid, iprot, oprot):
        args = setup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setup_result()
        try:
            self._handler.setup(args.name, args.description)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_addService(self, seqid, iprot, oprot):
        args = addService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addService_result()
        try:
            self._handler.addService(args.svc)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeService(self, seqid, iprot, oprot):
        args = removeService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeService_result()
        try:
            self._handler.removeService(args.svc)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_initConsumer(self, seqid, iprot, oprot):
        args = initConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = initConsumer_result()
        try:
            self._handler.initConsumer(args.scheme, args.hostname, args.port, args.urlPrefix, args.clientID, args.hceCard, args.pspConfig)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("initConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_initProducer(self, seqid, iprot, oprot):
        args = initProducer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = initProducer_result()
        try:
            self._handler.initProducer(args.pspConfig)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("initProducer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDevice(self, seqid, iprot, oprot):
        args = getDevice_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDevice_result()
        try:
            result.success = self._handler.getDevice()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDevice", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_startServiceBroadcast(self, seqid, iprot, oprot):
        args = startServiceBroadcast_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = startServiceBroadcast_result()
        try:
            self._handler.startServiceBroadcast(args.timeoutMillis)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("startServiceBroadcast", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stopServiceBroadcast(self, seqid, iprot, oprot):
        args = stopServiceBroadcast_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stopServiceBroadcast_result()
        try:
            self._handler.stopServiceBroadcast()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stopServiceBroadcast", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deviceDiscovery(self, seqid, iprot, oprot):
        args = deviceDiscovery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deviceDiscovery_result()
        try:
            result.success = self._handler.deviceDiscovery(args.timeoutMillis)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deviceDiscovery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_requestServices(self, seqid, iprot, oprot):
        args = requestServices_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = requestServices_result()
        try:
            result.success = self._handler.requestServices()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("requestServices", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getServicePrices(self, seqid, iprot, oprot):
        args = getServicePrices_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getServicePrices_result()
        try:
            result.success = self._handler.getServicePrices(args.serviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getServicePrices", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_selectService(self, seqid, iprot, oprot):
        args = selectService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = selectService_result()
        try:
            result.success = self._handler.selectService(args.serviceId, args.numberOfUnits, args.priceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("selectService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_makePayment(self, seqid, iprot, oprot):
        args = makePayment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = makePayment_result()
        try:
            result.success = self._handler.makePayment(args.request)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("makePayment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_beginServiceDelivery(self, seqid, iprot, oprot):
        args = beginServiceDelivery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = beginServiceDelivery_result()
        try:
            result.success = self._handler.beginServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsToSupply)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("beginServiceDelivery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_endServiceDelivery(self, seqid, iprot, oprot):
        args = endServiceDelivery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = endServiceDelivery_result()
        try:
            result.success = self._handler.endServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsReceived)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("endServiceDelivery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CloseRPCAgent(self, seqid, iprot, oprot):
        args = CloseRPCAgent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CloseRPCAgent_result()
        try:
            self._handler.CloseRPCAgent()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CloseRPCAgent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class setup_args(object):
    """
    Attributes:
     - name
     - description
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    )

    def __init__(self, name=None, description=None,):
        self.name = name
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('setup_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class setup_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('setup_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addService_args(object):
    """
    Attributes:
     - svc
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'svc', (wpthrift_types.ttypes.Service, wpthrift_types.ttypes.Service.thrift_spec), None, ),  # 1
    )

    def __init__(self, svc=None,):
        self.svc = svc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.svc = wpthrift_types.ttypes.Service()
                    self.svc.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('addService_args')
        if self.svc is not None:
            oprot.writeFieldBegin('svc', TType.STRUCT, 1)
            self.svc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addService_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('addService_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class removeService_args(object):
    """
    Attributes:
     - svc
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'svc', (wpthrift_types.ttypes.Service, wpthrift_types.ttypes.Service.thrift_spec), None, ),  # 1
    )

    def __init__(self, svc=None,):
        self.svc = svc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.svc = wpthrift_types.ttypes.Service()
                    self.svc.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('removeService_args')
        if self.svc is not None:
            oprot.writeFieldBegin('svc', TType.STRUCT, 1)
            self.svc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class removeService_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('removeService_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class initConsumer_args(object):
    """
    Attributes:
     - scheme
     - hostname
     - port
     - urlPrefix
     - clientID
     - hceCard
     - pspConfig
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'scheme', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'hostname', 'UTF8', None, ),  # 2
        (3, TType.I32, 'port', None, None, ),  # 3
        (4, TType.STRING, 'urlPrefix', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'clientID', 'UTF8', None, ),  # 5
        (6, TType.STRUCT, 'hceCard', (wpthrift_types.ttypes.HCECard, wpthrift_types.ttypes.HCECard.thrift_spec), None, ),  # 6
        (7, TType.MAP, 'pspConfig', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
    )

    def __init__(self, scheme=None, hostname=None, port=None, urlPrefix=None, clientID=None, hceCard=None, pspConfig=None,):
        self.scheme = scheme
        self.hostname = hostname
        self.port = port
        self.urlPrefix = urlPrefix
        self.clientID = clientID
        self.hceCard = hceCard
        self.pspConfig = pspConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scheme = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.urlPrefix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.hceCard = wpthrift_types.ttypes.HCECard()
                    self.hceCard.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.pspConfig = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.pspConfig[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('initConsumer_args')
        if self.scheme is not None:
            oprot.writeFieldBegin('scheme', TType.STRING, 1)
            oprot.writeString(self.scheme.encode('utf-8') if sys.version_info[0] == 2 else self.scheme)
            oprot.writeFieldEnd()
        if self.hostname is not None:
            oprot.writeFieldBegin('hostname', TType.STRING, 2)
            oprot.writeString(self.hostname.encode('utf-8') if sys.version_info[0] == 2 else self.hostname)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.urlPrefix is not None:
            oprot.writeFieldBegin('urlPrefix', TType.STRING, 4)
            oprot.writeString(self.urlPrefix.encode('utf-8') if sys.version_info[0] == 2 else self.urlPrefix)
            oprot.writeFieldEnd()
        if self.clientID is not None:
            oprot.writeFieldBegin('clientID', TType.STRING, 5)
            oprot.writeString(self.clientID.encode('utf-8') if sys.version_info[0] == 2 else self.clientID)
            oprot.writeFieldEnd()
        if self.hceCard is not None:
            oprot.writeFieldBegin('hceCard', TType.STRUCT, 6)
            self.hceCard.write(oprot)
            oprot.writeFieldEnd()
        if self.pspConfig is not None:
            oprot.writeFieldBegin('pspConfig', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.pspConfig))
            for kiter7, viter8 in self.pspConfig.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class initConsumer_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('initConsumer_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class initProducer_args(object):
    """
    Attributes:
     - pspConfig
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'pspConfig', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
    )

    def __init__(self, pspConfig=None,):
        self.pspConfig = pspConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.pspConfig = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.pspConfig[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('initProducer_args')
        if self.pspConfig is not None:
            oprot.writeFieldBegin('pspConfig', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.pspConfig))
            for kiter16, viter17 in self.pspConfig.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeString(viter17.encode('utf-8') if sys.version_info[0] == 2 else viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class initProducer_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('initProducer_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDevice_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDevice_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDevice_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (wpthrift_types.ttypes.Device, wpthrift_types.ttypes.Device.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = wpthrift_types.ttypes.Device()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDevice_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class startServiceBroadcast_args(object):
    """
    Attributes:
     - timeoutMillis
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'timeoutMillis', None, None, ),  # 1
    )

    def __init__(self, timeoutMillis=None,):
        self.timeoutMillis = timeoutMillis

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.timeoutMillis = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('startServiceBroadcast_args')
        if self.timeoutMillis is not None:
            oprot.writeFieldBegin('timeoutMillis', TType.I32, 1)
            oprot.writeI32(self.timeoutMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class startServiceBroadcast_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('startServiceBroadcast_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stopServiceBroadcast_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('stopServiceBroadcast_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stopServiceBroadcast_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('stopServiceBroadcast_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deviceDiscovery_args(object):
    """
    Attributes:
     - timeoutMillis
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'timeoutMillis', None, None, ),  # 1
    )

    def __init__(self, timeoutMillis=None,):
        self.timeoutMillis = timeoutMillis

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.timeoutMillis = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deviceDiscovery_args')
        if self.timeoutMillis is not None:
            oprot.writeFieldBegin('timeoutMillis', TType.I32, 1)
            oprot.writeI32(self.timeoutMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deviceDiscovery_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.SET, 'success', (TType.STRUCT, (wpthrift_types.ttypes.ServiceMessage, wpthrift_types.ttypes.ServiceMessage.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.SET:
                    self.success = set()
                    (_etype21, _size18) = iprot.readSetBegin()
                    for _i22 in range(_size18):
                        _elem23 = wpthrift_types.ttypes.ServiceMessage()
                        _elem23.read(iprot)
                        self.success.add(_elem23)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deviceDiscovery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.SET, 0)
            oprot.writeSetBegin(TType.STRUCT, len(self.success))
            for iter24 in self.success:
                iter24.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class requestServices_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('requestServices_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class requestServices_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.SET, 'success', (TType.STRUCT, (wpthrift_types.ttypes.ServiceDetails, wpthrift_types.ttypes.ServiceDetails.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.SET:
                    self.success = set()
                    (_etype28, _size25) = iprot.readSetBegin()
                    for _i29 in range(_size25):
                        _elem30 = wpthrift_types.ttypes.ServiceDetails()
                        _elem30.read(iprot)
                        self.success.add(_elem30)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('requestServices_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.SET, 0)
            oprot.writeSetBegin(TType.STRUCT, len(self.success))
            for iter31 in self.success:
                iter31.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getServicePrices_args(object):
    """
    Attributes:
     - serviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceId', None, None, ),  # 1
    )

    def __init__(self, serviceId=None,):
        self.serviceId = serviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getServicePrices_args')
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 1)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getServicePrices_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.SET, 'success', (TType.STRUCT, (wpthrift_types.ttypes.Price, wpthrift_types.ttypes.Price.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.SET:
                    self.success = set()
                    (_etype35, _size32) = iprot.readSetBegin()
                    for _i36 in range(_size32):
                        _elem37 = wpthrift_types.ttypes.Price()
                        _elem37.read(iprot)
                        self.success.add(_elem37)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getServicePrices_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.SET, 0)
            oprot.writeSetBegin(TType.STRUCT, len(self.success))
            for iter38 in self.success:
                iter38.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class selectService_args(object):
    """
    Attributes:
     - serviceId
     - numberOfUnits
     - priceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceId', None, None, ),  # 1
        (2, TType.I32, 'numberOfUnits', None, None, ),  # 2
        (3, TType.I32, 'priceId', None, None, ),  # 3
    )

    def __init__(self, serviceId=None, numberOfUnits=None, priceId=None,):
        self.serviceId = serviceId
        self.numberOfUnits = numberOfUnits
        self.priceId = priceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.numberOfUnits = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.priceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('selectService_args')
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 1)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        if self.numberOfUnits is not None:
            oprot.writeFieldBegin('numberOfUnits', TType.I32, 2)
            oprot.writeI32(self.numberOfUnits)
            oprot.writeFieldEnd()
        if self.priceId is not None:
            oprot.writeFieldBegin('priceId', TType.I32, 3)
            oprot.writeI32(self.priceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class selectService_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (wpthrift_types.ttypes.TotalPriceResponse, wpthrift_types.ttypes.TotalPriceResponse.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = wpthrift_types.ttypes.TotalPriceResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('selectService_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class makePayment_args(object):
    """
    Attributes:
     - request
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'request', (wpthrift_types.ttypes.TotalPriceResponse, wpthrift_types.ttypes.TotalPriceResponse.thrift_spec), None, ),  # 1
    )

    def __init__(self, request=None,):
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = wpthrift_types.ttypes.TotalPriceResponse()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('makePayment_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class makePayment_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (wpthrift_types.ttypes.PaymentResponse, wpthrift_types.ttypes.PaymentResponse.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = wpthrift_types.ttypes.PaymentResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('makePayment_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class beginServiceDelivery_args(object):
    """
    Attributes:
     - serviceID
     - serviceDeliveryToken
     - unitsToSupply
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceID', None, None, ),  # 1
        (2, TType.STRUCT, 'serviceDeliveryToken', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 2
        (3, TType.I32, 'unitsToSupply', None, None, ),  # 3
    )

    def __init__(self, serviceID=None, serviceDeliveryToken=None, unitsToSupply=None,):
        self.serviceID = serviceID
        self.serviceDeliveryToken = serviceDeliveryToken
        self.unitsToSupply = unitsToSupply

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serviceDeliveryToken = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.serviceDeliveryToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unitsToSupply = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('beginServiceDelivery_args')
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 1)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.serviceDeliveryToken is not None:
            oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 2)
            self.serviceDeliveryToken.write(oprot)
            oprot.writeFieldEnd()
        if self.unitsToSupply is not None:
            oprot.writeFieldBegin('unitsToSupply', TType.I32, 3)
            oprot.writeI32(self.unitsToSupply)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class beginServiceDelivery_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('beginServiceDelivery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class endServiceDelivery_args(object):
    """
    Attributes:
     - serviceID
     - serviceDeliveryToken
     - unitsReceived
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceID', None, None, ),  # 1
        (2, TType.STRUCT, 'serviceDeliveryToken', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 2
        (3, TType.I32, 'unitsReceived', None, None, ),  # 3
    )

    def __init__(self, serviceID=None, serviceDeliveryToken=None, unitsReceived=None,):
        self.serviceID = serviceID
        self.serviceDeliveryToken = serviceDeliveryToken
        self.unitsReceived = unitsReceived

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serviceDeliveryToken = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.serviceDeliveryToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unitsReceived = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('endServiceDelivery_args')
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 1)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.serviceDeliveryToken is not None:
            oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 2)
            self.serviceDeliveryToken.write(oprot)
            oprot.writeFieldEnd()
        if self.unitsReceived is not None:
            oprot.writeFieldBegin('unitsReceived', TType.I32, 3)
            oprot.writeI32(self.unitsReceived)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class endServiceDelivery_result(object):
    """
    Attributes:
     - success
     - err
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('endServiceDelivery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CloseRPCAgent_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CloseRPCAgent_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CloseRPCAgent_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CloseRPCAgent_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
