#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    """
    WorldpayWithin Callback Service - RPC clients implement this service to enable callbacks from WorldpayWithin Service
    """
    def beginServiceDelivery(self, serviceID, servicePriceID, serviceDeliveryToken, unitsToSupply):
        """
        Parameters:
         - serviceID
         - servicePriceID
         - serviceDeliveryToken
         - unitsToSupply
        """
        pass

    def endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsReceived
        """
        pass

    def makePaymentEvent(self, totalPrice, orderCurrency, clientToken, orderDescription, uuid):
        """
        Parameters:
         - totalPrice
         - orderCurrency
         - clientToken
         - orderDescription
         - uuid
        """
        pass

    def serviceDiscoveryEvent(self, remoteAddr):
        """
        Parameters:
         - remoteAddr
        """
        pass

    def servicePricesEvent(self, remoteAddr, serviceId):
        """
        Parameters:
         - remoteAddr
         - serviceId
        """
        pass

    def serviceTotalPriceEvent(self, remoteAddr, serviceID, totalPriceResp):
        """
        Parameters:
         - remoteAddr
         - serviceID
         - totalPriceResp
        """
        pass

    def errorEvent(self, msg):
        """
        Parameters:
         - msg
        """
        pass


class Client(Iface):
    """
    WorldpayWithin Callback Service - RPC clients implement this service to enable callbacks from WorldpayWithin Service
    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def beginServiceDelivery(self, serviceID, servicePriceID, serviceDeliveryToken, unitsToSupply):
        """
        Parameters:
         - serviceID
         - servicePriceID
         - serviceDeliveryToken
         - unitsToSupply
        """
        self.send_beginServiceDelivery(serviceID, servicePriceID, serviceDeliveryToken, unitsToSupply)
        self.recv_beginServiceDelivery()

    def send_beginServiceDelivery(self, serviceID, servicePriceID, serviceDeliveryToken, unitsToSupply):
        self._oprot.writeMessageBegin('beginServiceDelivery', TMessageType.CALL, self._seqid)
        args = beginServiceDelivery_args()
        args.serviceID = serviceID
        args.servicePriceID = servicePriceID
        args.serviceDeliveryToken = serviceDeliveryToken
        args.unitsToSupply = unitsToSupply
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_beginServiceDelivery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = beginServiceDelivery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsReceived
        """
        self.send_endServiceDelivery(serviceID, serviceDeliveryToken, unitsReceived)
        self.recv_endServiceDelivery()

    def send_endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        self._oprot.writeMessageBegin('endServiceDelivery', TMessageType.CALL, self._seqid)
        args = endServiceDelivery_args()
        args.serviceID = serviceID
        args.serviceDeliveryToken = serviceDeliveryToken
        args.unitsReceived = unitsReceived
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_endServiceDelivery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = endServiceDelivery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def makePaymentEvent(self, totalPrice, orderCurrency, clientToken, orderDescription, uuid):
        """
        Parameters:
         - totalPrice
         - orderCurrency
         - clientToken
         - orderDescription
         - uuid
        """
        self.send_makePaymentEvent(totalPrice, orderCurrency, clientToken, orderDescription, uuid)
        self.recv_makePaymentEvent()

    def send_makePaymentEvent(self, totalPrice, orderCurrency, clientToken, orderDescription, uuid):
        self._oprot.writeMessageBegin('makePaymentEvent', TMessageType.CALL, self._seqid)
        args = makePaymentEvent_args()
        args.totalPrice = totalPrice
        args.orderCurrency = orderCurrency
        args.clientToken = clientToken
        args.orderDescription = orderDescription
        args.uuid = uuid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_makePaymentEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = makePaymentEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def serviceDiscoveryEvent(self, remoteAddr):
        """
        Parameters:
         - remoteAddr
        """
        self.send_serviceDiscoveryEvent(remoteAddr)
        self.recv_serviceDiscoveryEvent()

    def send_serviceDiscoveryEvent(self, remoteAddr):
        self._oprot.writeMessageBegin('serviceDiscoveryEvent', TMessageType.CALL, self._seqid)
        args = serviceDiscoveryEvent_args()
        args.remoteAddr = remoteAddr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceDiscoveryEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceDiscoveryEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def servicePricesEvent(self, remoteAddr, serviceId):
        """
        Parameters:
         - remoteAddr
         - serviceId
        """
        self.send_servicePricesEvent(remoteAddr, serviceId)
        self.recv_servicePricesEvent()

    def send_servicePricesEvent(self, remoteAddr, serviceId):
        self._oprot.writeMessageBegin('servicePricesEvent', TMessageType.CALL, self._seqid)
        args = servicePricesEvent_args()
        args.remoteAddr = remoteAddr
        args.serviceId = serviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_servicePricesEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = servicePricesEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def serviceTotalPriceEvent(self, remoteAddr, serviceID, totalPriceResp):
        """
        Parameters:
         - remoteAddr
         - serviceID
         - totalPriceResp
        """
        self.send_serviceTotalPriceEvent(remoteAddr, serviceID, totalPriceResp)
        self.recv_serviceTotalPriceEvent()

    def send_serviceTotalPriceEvent(self, remoteAddr, serviceID, totalPriceResp):
        self._oprot.writeMessageBegin('serviceTotalPriceEvent', TMessageType.CALL, self._seqid)
        args = serviceTotalPriceEvent_args()
        args.remoteAddr = remoteAddr
        args.serviceID = serviceID
        args.totalPriceResp = totalPriceResp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceTotalPriceEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceTotalPriceEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def errorEvent(self, msg):
        """
        Parameters:
         - msg
        """
        self.send_errorEvent(msg)
        self.recv_errorEvent()

    def send_errorEvent(self, msg):
        self._oprot.writeMessageBegin('errorEvent', TMessageType.CALL, self._seqid)
        args = errorEvent_args()
        args.msg = msg
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_errorEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = errorEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["beginServiceDelivery"] = Processor.process_beginServiceDelivery
        self._processMap["endServiceDelivery"] = Processor.process_endServiceDelivery
        self._processMap["makePaymentEvent"] = Processor.process_makePaymentEvent
        self._processMap["serviceDiscoveryEvent"] = Processor.process_serviceDiscoveryEvent
        self._processMap["servicePricesEvent"] = Processor.process_servicePricesEvent
        self._processMap["serviceTotalPriceEvent"] = Processor.process_serviceTotalPriceEvent
        self._processMap["errorEvent"] = Processor.process_errorEvent

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_beginServiceDelivery(self, seqid, iprot, oprot):
        args = beginServiceDelivery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = beginServiceDelivery_result()
        try:
            self._handler.beginServiceDelivery(args.serviceID, args.servicePriceID, args.serviceDeliveryToken, args.unitsToSupply)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("beginServiceDelivery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_endServiceDelivery(self, seqid, iprot, oprot):
        args = endServiceDelivery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = endServiceDelivery_result()
        try:
            self._handler.endServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsReceived)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("endServiceDelivery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_makePaymentEvent(self, seqid, iprot, oprot):
        args = makePaymentEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = makePaymentEvent_result()
        try:
            self._handler.makePaymentEvent(args.totalPrice, args.orderCurrency, args.clientToken, args.orderDescription, args.uuid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("makePaymentEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceDiscoveryEvent(self, seqid, iprot, oprot):
        args = serviceDiscoveryEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceDiscoveryEvent_result()
        try:
            self._handler.serviceDiscoveryEvent(args.remoteAddr)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceDiscoveryEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_servicePricesEvent(self, seqid, iprot, oprot):
        args = servicePricesEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = servicePricesEvent_result()
        try:
            self._handler.servicePricesEvent(args.remoteAddr, args.serviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("servicePricesEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceTotalPriceEvent(self, seqid, iprot, oprot):
        args = serviceTotalPriceEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceTotalPriceEvent_result()
        try:
            self._handler.serviceTotalPriceEvent(args.remoteAddr, args.serviceID, args.totalPriceResp)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceTotalPriceEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_errorEvent(self, seqid, iprot, oprot):
        args = errorEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = errorEvent_result()
        try:
            self._handler.errorEvent(args.msg)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("errorEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class beginServiceDelivery_args(object):
    """
    Attributes:
     - serviceID
     - servicePriceID
     - serviceDeliveryToken
     - unitsToSupply
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceID', None, None, ),  # 1
        (2, TType.I32, 'servicePriceID', None, None, ),  # 2
        (3, TType.STRUCT, 'serviceDeliveryToken', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 3
        (4, TType.I32, 'unitsToSupply', None, None, ),  # 4
    )

    def __init__(self, serviceID=None, servicePriceID=None, serviceDeliveryToken=None, unitsToSupply=None,):
        self.serviceID = serviceID
        self.servicePriceID = servicePriceID
        self.serviceDeliveryToken = serviceDeliveryToken
        self.unitsToSupply = unitsToSupply

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.servicePriceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.serviceDeliveryToken = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.serviceDeliveryToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.unitsToSupply = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('beginServiceDelivery_args')
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 1)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.servicePriceID is not None:
            oprot.writeFieldBegin('servicePriceID', TType.I32, 2)
            oprot.writeI32(self.servicePriceID)
            oprot.writeFieldEnd()
        if self.serviceDeliveryToken is not None:
            oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 3)
            self.serviceDeliveryToken.write(oprot)
            oprot.writeFieldEnd()
        if self.unitsToSupply is not None:
            oprot.writeFieldBegin('unitsToSupply', TType.I32, 4)
            oprot.writeI32(self.unitsToSupply)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class beginServiceDelivery_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('beginServiceDelivery_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class endServiceDelivery_args(object):
    """
    Attributes:
     - serviceID
     - serviceDeliveryToken
     - unitsReceived
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceID', None, None, ),  # 1
        (2, TType.STRUCT, 'serviceDeliveryToken', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 2
        (3, TType.I32, 'unitsReceived', None, None, ),  # 3
    )

    def __init__(self, serviceID=None, serviceDeliveryToken=None, unitsReceived=None,):
        self.serviceID = serviceID
        self.serviceDeliveryToken = serviceDeliveryToken
        self.unitsReceived = unitsReceived

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serviceDeliveryToken = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.serviceDeliveryToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unitsReceived = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('endServiceDelivery_args')
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 1)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.serviceDeliveryToken is not None:
            oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 2)
            self.serviceDeliveryToken.write(oprot)
            oprot.writeFieldEnd()
        if self.unitsReceived is not None:
            oprot.writeFieldBegin('unitsReceived', TType.I32, 3)
            oprot.writeI32(self.unitsReceived)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class endServiceDelivery_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('endServiceDelivery_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class makePaymentEvent_args(object):
    """
    Attributes:
     - totalPrice
     - orderCurrency
     - clientToken
     - orderDescription
     - uuid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'totalPrice', None, None, ),  # 1
        (2, TType.STRING, 'orderCurrency', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'clientToken', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'orderDescription', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'uuid', 'UTF8', None, ),  # 5
    )

    def __init__(self, totalPrice=None, orderCurrency=None, clientToken=None, orderDescription=None, uuid=None,):
        self.totalPrice = totalPrice
        self.orderCurrency = orderCurrency
        self.clientToken = clientToken
        self.orderDescription = orderDescription
        self.uuid = uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.totalPrice = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.orderCurrency = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.orderDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('makePaymentEvent_args')
        if self.totalPrice is not None:
            oprot.writeFieldBegin('totalPrice', TType.I32, 1)
            oprot.writeI32(self.totalPrice)
            oprot.writeFieldEnd()
        if self.orderCurrency is not None:
            oprot.writeFieldBegin('orderCurrency', TType.STRING, 2)
            oprot.writeString(self.orderCurrency.encode('utf-8') if sys.version_info[0] == 2 else self.orderCurrency)
            oprot.writeFieldEnd()
        if self.clientToken is not None:
            oprot.writeFieldBegin('clientToken', TType.STRING, 3)
            oprot.writeString(self.clientToken.encode('utf-8') if sys.version_info[0] == 2 else self.clientToken)
            oprot.writeFieldEnd()
        if self.orderDescription is not None:
            oprot.writeFieldBegin('orderDescription', TType.STRING, 4)
            oprot.writeString(self.orderDescription.encode('utf-8') if sys.version_info[0] == 2 else self.orderDescription)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 5)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class makePaymentEvent_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('makePaymentEvent_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceDiscoveryEvent_args(object):
    """
    Attributes:
     - remoteAddr
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'remoteAddr', 'UTF8', None, ),  # 1
    )

    def __init__(self, remoteAddr=None,):
        self.remoteAddr = remoteAddr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.remoteAddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceDiscoveryEvent_args')
        if self.remoteAddr is not None:
            oprot.writeFieldBegin('remoteAddr', TType.STRING, 1)
            oprot.writeString(self.remoteAddr.encode('utf-8') if sys.version_info[0] == 2 else self.remoteAddr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceDiscoveryEvent_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceDiscoveryEvent_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class servicePricesEvent_args(object):
    """
    Attributes:
     - remoteAddr
     - serviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'remoteAddr', 'UTF8', None, ),  # 1
        (2, TType.I32, 'serviceId', None, None, ),  # 2
    )

    def __init__(self, remoteAddr=None, serviceId=None,):
        self.remoteAddr = remoteAddr
        self.serviceId = serviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.remoteAddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('servicePricesEvent_args')
        if self.remoteAddr is not None:
            oprot.writeFieldBegin('remoteAddr', TType.STRING, 1)
            oprot.writeString(self.remoteAddr.encode('utf-8') if sys.version_info[0] == 2 else self.remoteAddr)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 2)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class servicePricesEvent_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('servicePricesEvent_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceTotalPriceEvent_args(object):
    """
    Attributes:
     - remoteAddr
     - serviceID
     - totalPriceResp
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'remoteAddr', 'UTF8', None, ),  # 1
        (2, TType.I32, 'serviceID', None, None, ),  # 2
        (3, TType.STRUCT, 'totalPriceResp', (wpthrift_types.ttypes.TotalPriceResponse, wpthrift_types.ttypes.TotalPriceResponse.thrift_spec), None, ),  # 3
    )

    def __init__(self, remoteAddr=None, serviceID=None, totalPriceResp=None,):
        self.remoteAddr = remoteAddr
        self.serviceID = serviceID
        self.totalPriceResp = totalPriceResp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.remoteAddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.totalPriceResp = wpthrift_types.ttypes.TotalPriceResponse()
                    self.totalPriceResp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceTotalPriceEvent_args')
        if self.remoteAddr is not None:
            oprot.writeFieldBegin('remoteAddr', TType.STRING, 1)
            oprot.writeString(self.remoteAddr.encode('utf-8') if sys.version_info[0] == 2 else self.remoteAddr)
            oprot.writeFieldEnd()
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 2)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.totalPriceResp is not None:
            oprot.writeFieldBegin('totalPriceResp', TType.STRUCT, 3)
            self.totalPriceResp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceTotalPriceEvent_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceTotalPriceEvent_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class errorEvent_args(object):
    """
    Attributes:
     - msg
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'msg', 'UTF8', None, ),  # 1
    )

    def __init__(self, msg=None,):
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('errorEvent_args')
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 1)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class errorEvent_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('errorEvent_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
