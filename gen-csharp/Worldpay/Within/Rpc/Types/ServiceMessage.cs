/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Worldpay.Within.Rpc.Types
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServiceMessage : TBase
  {

    public string DeviceDescription { get; set; }

    public string Hostname { get; set; }

    public int? PortNumber { get; set; }

    public string ServerId { get; set; }

    public string UrlPrefix { get; set; }

    public string Scheme { get; set; }

    public string DeviceName { get; set; }

    public ServiceMessage() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DeviceDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Hostname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PortNumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ServerId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UrlPrefix = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Scheme = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                DeviceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ServiceMessage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceDescription != null) {
          field.Name = "deviceDescription";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceDescription);
          oprot.WriteFieldEnd();
        }
        if (Hostname != null) {
          field.Name = "hostname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Hostname);
          oprot.WriteFieldEnd();
        }
        if (PortNumber != null) {
          field.Name = "portNumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PortNumber.Value);
          oprot.WriteFieldEnd();
        }
        if (ServerId != null) {
          field.Name = "serverId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ServerId);
          oprot.WriteFieldEnd();
        }
        if (UrlPrefix != null) {
          field.Name = "urlPrefix";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UrlPrefix);
          oprot.WriteFieldEnd();
        }
        if (Scheme != null) {
          field.Name = "scheme";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme);
          oprot.WriteFieldEnd();
        }
        if (DeviceName != null) {
          field.Name = "deviceName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ServiceMessage(");
      bool __first = true;
      if (DeviceDescription != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceDescription: ");
        __sb.Append(DeviceDescription);
      }
      if (Hostname != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hostname: ");
        __sb.Append(Hostname);
      }
      if (PortNumber != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PortNumber: ");
        __sb.Append(PortNumber);
      }
      if (ServerId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServerId: ");
        __sb.Append(ServerId);
      }
      if (UrlPrefix != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UrlPrefix: ");
        __sb.Append(UrlPrefix);
      }
      if (Scheme != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme: ");
        __sb.Append(Scheme);
      }
      if (DeviceName != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceName: ");
        __sb.Append(DeviceName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
