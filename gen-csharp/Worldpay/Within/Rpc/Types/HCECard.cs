/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Worldpay.Within.Rpc.Types
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HCECard : TBase
  {

    public string FirstName { get; set; }

    public string LastName { get; set; }

    public int? ExpMonth { get; set; }

    public int? ExpYear { get; set; }

    public string CardNumber { get; set; }

    public string Type { get; set; }

    public string Cvc { get; set; }

    public HCECard() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FirstName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                LastName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ExpMonth = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ExpYear = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CardNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Cvc = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HCECard");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FirstName != null) {
          field.Name = "firstName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FirstName);
          oprot.WriteFieldEnd();
        }
        if (LastName != null) {
          field.Name = "lastName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastName);
          oprot.WriteFieldEnd();
        }
        if (ExpMonth != null) {
          field.Name = "expMonth";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpMonth.Value);
          oprot.WriteFieldEnd();
        }
        if (ExpYear != null) {
          field.Name = "expYear";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpYear.Value);
          oprot.WriteFieldEnd();
        }
        if (CardNumber != null) {
          field.Name = "cardNumber";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CardNumber);
          oprot.WriteFieldEnd();
        }
        if (Type != null) {
          field.Name = "type";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Type);
          oprot.WriteFieldEnd();
        }
        if (Cvc != null) {
          field.Name = "cvc";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cvc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HCECard(");
      bool __first = true;
      if (FirstName != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (LastName != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastName: ");
        __sb.Append(LastName);
      }
      if (ExpMonth != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpMonth: ");
        __sb.Append(ExpMonth);
      }
      if (ExpYear != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpYear: ");
        __sb.Append(ExpYear);
      }
      if (CardNumber != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CardNumber: ");
        __sb.Append(CardNumber);
      }
      if (Type != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Cvc != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cvc: ");
        __sb.Append(Cvc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
