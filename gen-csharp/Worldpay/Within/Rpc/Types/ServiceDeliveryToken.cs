/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Worldpay.Within.Rpc.Types
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServiceDeliveryToken : TBase
  {

    public string Key { get; set; }

    public string Issued { get; set; }

    public string Expiry { get; set; }

    public bool? RefundOnExpiry { get; set; }

    public byte[] Signature { get; set; }

    public ServiceDeliveryToken() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Issued = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Expiry = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                RefundOnExpiry = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Signature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ServiceDeliveryToken");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Issued != null) {
          field.Name = "issued";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Issued);
          oprot.WriteFieldEnd();
        }
        if (Expiry != null) {
          field.Name = "expiry";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Expiry);
          oprot.WriteFieldEnd();
        }
        if (RefundOnExpiry != null) {
          field.Name = "refundOnExpiry";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(RefundOnExpiry.Value);
          oprot.WriteFieldEnd();
        }
        if (Signature != null) {
          field.Name = "signature";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Signature);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ServiceDeliveryToken(");
      bool __first = true;
      if (Key != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key);
      }
      if (Issued != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Issued: ");
        __sb.Append(Issued);
      }
      if (Expiry != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Expiry: ");
        __sb.Append(Expiry);
      }
      if (RefundOnExpiry != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RefundOnExpiry: ");
        __sb.Append(RefundOnExpiry);
      }
      if (Signature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signature: ");
        __sb.Append(Signature);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
